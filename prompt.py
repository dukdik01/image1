import streamlit as st
import requests
from PIL import Image, ImageOps
from io import BytesIO

# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
images = {
    "‡∏´‡∏°‡∏≤‡∏õ‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡πä‡∏Å": "https://upload.wikimedia.org/wikipedia/commons/thumb/2/2f/Comparison_of_a_wolf_and_a_pug.png/250px-Comparison_of_a_wolf_and_a_pug.png",
    "‡πÅ‡∏°‡∏ß": "https://upload.wikimedia.org/wikipedia/commons/thumb/6/68/Orange_tabby_cat_sitting_on_fallen_leaves-Hisashi-01A.jpg/800px-Orange_tabby_cat_sitting_on_fallen_leaves-Hisashi-01A.jpg",
    "‡∏ô‡∏Å‡∏Æ‡∏π‡∏Å": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/07/Chouettes.jpg/250px-Chouettes.jpg"
}

# ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
if "selected_image_url" not in st.session_state:
    st.session_state.selected_image_url = None
if "selected_caption" not in st.session_state:
    st.session_state.selected_caption = ""

# ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flip ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î (optional, ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏µ‡πÄ‡∏ã‡∏ï)
if "flip_image" not in st.session_state:
    st.session_state.flip_image = False
if "width" not in st.session_state:
    st.session_state.width = None
if "height" not in st.session_state:
    st.session_state.height = None

st.title("‡πÅ‡∏Å‡∏•‡πÄ‡∏•‡∏≠‡∏£‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")

if not st.session_state.selected_image_url:
    cols = st.columns(3)
    for idx, (caption, url) in enumerate(images.items()):
        with cols[idx]:
            st.image(url, caption=caption, use_container_width=True)           
else:
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL
        response = requests.get(st.session_state.selected_image_url)
        img = Image.open(BytesIO(response.content))

        st.subheader(f"‡∏†‡∏≤‡∏û: {st.session_state.selected_caption}")

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô slider ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô session_state
        if st.session_state.width is None:
            st.session_state.width = img.width
        if st.session_state.height is None:
            st.session_state.height = img.height

        # slider ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö resize
        width = st.slider("‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (px)", 50, 1000, st.session_state.width)
        height = st.slider("‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (px)", 50, 1000, st.session_state.height)
        st.session_state.width = width
        st.session_state.height = height

        # checkbox flip image
        flip = st.checkbox("‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏û (Flip image)", value=st.session_state.flip_image)
        st.session_state.flip_image = flip

        resized_img = img.resize((width, height))

        if flip:
            resized_img = ImageOps.mirror(resized_img)

        st.image(resized_img, caption=f"{st.session_state.selected_caption} ({width}x{height})", use_container_width=False)
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {e}")

    col1, col2, col3 = st.columns([1,1,1])
    with col1:
        if st.button("üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
            # ‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            st.session_state.selected_image_url = None
            st.session_state.selected_caption = ""
            st.session_state.flip_image = False
            st.session_state.width = None
            st.session_state.height = None
            st.experimental_rerun()

    with col2:
        if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"):
            # ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï flip ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î
            st.session_state.flip_image = False
            st.session_state.width = None
            st.session_state.height = None
            st.experimental_rerun()
